<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="new_robot">

    <xacro:property name="base_length" value="0.1" />
    <xacro:property name="base_radius" value="0.1" />

    <xacro:property name="base_x" value="0.6" />
    <xacro:property name="base_y" value="0.1" />
    <xacro:property name="base_z" value="0.1" />

    <xacro:macro name="default_inertial" params="mass">
       <inertial>
               <mass value="${mass}" />
               <inertia ixx="0.06" ixy="0.0" ixz="0.0"
                   iyy="0.05" iyz="0.0"
                   izz="0.05" />
       </inertial>
   </xacro:macro>


    <link name="base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${base_radius}" length="${base_length}"/>
            </geometry>

            <material name="white">>
                <color rgba="1 1 1 1"/>
            </material>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="${base_radius}" length="${base_length}"/>
            </geometry>
        </collision>

        <xacro:default_inertial mass="10"/>

    </link>
    <link name="gps_link">

    </link>
    <joint name="gps_joint" type="fixed">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="base_link"/>
            <child link="gps_link"/>
    </joint>


     <joint name="hokuyo_joint" type="fixed">
        <axis xyz="0 1 0" />
        <origin xyz="0.1 0 0.2" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="hokuyo_link"/>
    </joint>

    <!-- Hokuyo Laser -->
    <link name="hokuyo_link">
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
            <box size="0.1 0.1 0.1"/>
            </geometry>
        </collision>

        <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.1 0.1 0.1"/>
        </geometry>
        </visual>

        <inertial>
            <mass value="1e-5" />
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
        </inertial>
    </link>

     <xacro:property name="camera_link" value="0.05" /> <!-- Size of square 'camera' box -->

    <joint name="camera_joint" type="fixed">
        <axis xyz="0 1 0" />
        <origin xyz="0.25 0 0.15" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="camera_link"/>
    </joint>

    <!-- Camera -->
    <link name="camera_link">
        <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="${camera_link} ${camera_link} ${camera_link}"/>
        </geometry>
        </collision>

        <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="${camera_link} ${camera_link} ${camera_link}"/>
        </geometry>
        <material name="red"/>
        </visual>

        <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
        </inertial>
    </link>




    <link name="link_1">

        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                 <box size="${base_x} ${base_y} ${base_z}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                 <box size="${base_x} ${base_y} ${base_z}"/>
            </geometry>
        </collision>

         <xacro:default_inertial mass="10"/>
         
    </link>

    <joint name="joint_1" type="fixed">

        <parent link="base_link"/>
        <child link="link_1"/>
        <axis rpy="0 0 0" xyz="0 0 1"/>
    </joint>

    <xacro:macro name="wheel" params="name *origin">
        <link name="${name}_wheelholder_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="0.01 0.01 0.01"/>
                </geometry>
            </visual>
            <inertial>
               <mass value="10" />
                    <inertia ixx="0.002" ixy="0.0" ixz="0.0"
                        iyy="0.002" iyz="0.0"
                        izz="0.002" />
            </inertial>
        </link>

        <joint name="${name}wheelholder_joint" type="fixed">
            <xacro:insert_block name="origin" />
            <parent link="base_link"/>
            <child link="${name}_wheelholder_link"/>
            <axis rpy="0 0 0" xyz="0 0 1"/>
        </joint>

        <link name="${name}_wheel_link">
            <visual>
                <origin xyz="0 0 0" rpy="1.57079 0 0"/>
                <geometry>
                    <cylinder radius="0.1" length="0.06"/>
                </geometry>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="1.57079 0 0"/>
                <geometry>
                    <cylinder radius="0.1" length="0.06"/>
                </geometry>
            </collision>
            <inertial>
               <mass value="2.5" />
               <inertia ixx="0.0016" ixy="0" ixz="0" iyy="0.0016" iyz="0" izz="0.003" />
                </inertial>
        </link>

        <gazebo reference="${name}_wheel_link">
            <mu1>0.85</mu1>
            <mu2>0.20</mu2>
            <kp value="10000000.0" />
			<kd value="1.0" />
			<fdir1 value="1 0 0"/>
        </gazebo>

        <joint name="${name}_wheel_joint" type="continuous">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <parent link="${name}_wheelholder_link"/>
            <child link="${name}_wheel_link"/>
            <axis  xyz="0 1 0"/>
        </joint>


    </xacro:macro>

    <wheel name="right_front">
        <origin xyz="0.2 -0.2 0" rpy="0 0 0"/>
    </wheel>

    <wheel name="left_front">
        <origin xyz="0.2 0.2 0" rpy="0 0 0"/>
    </wheel>

    <wheel name="right_rear">
        <origin xyz="-0.2 -0.2 0" rpy="0 0 0"/>
    </wheel>

    <wheel name="left_rear">
        <origin xyz="-0.2 0.2 0" rpy="0 0 0"/>
    </wheel>


    <gazebo>


  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

    <!-- Plugin update rate in Hz -->
    <updateRate>20</updateRate>

    <!-- Name of left joint, defaults to `left_joint` -->
    <leftJoint>left_front_wheel_joint</leftJoint>

    <!-- Name of right joint, defaults to `right_joint` -->
    <rightJoint>right_front_wheel_joint</rightJoint>

    <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
    <wheelSeparation>0.4</wheelSeparation>

    <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
    <wheelDiameter>0.2</wheelDiameter>

    <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
    <wheelAcceleration>1.0</wheelAcceleration>

    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
    <wheelTorque>30</wheelTorque>

    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
    <commandTopic>/cmd_vel</commandTopic>

    <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
    <odometryTopic>odom</odometryTopic>

    <!-- Odometry frame, defaults to `odom` -->
    <odometryFrame>odom</odometryFrame>

    <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
    <robotBaseFrame>base_link</robotBaseFrame>

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometrySource>1</odometrySource>

    <!-- Set to true to publish transforms for the wheel links, defaults to false -->
    <publishWheelTF>true</publishWheelTF>

    <!-- Set to true to publish transforms for the odometry, defaults to true -->
    <publishOdom>true</publishOdom>

    <publishOdomTF>false</publishOdomTF>

    <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
    <publishWheelJointState>true</publishWheelJointState>

    <!-- Set to true to swap right and left wheels, defaults to true -->
    <legacyMode>false</legacyMode>
  </plugin>
</gazebo>

<gazebo>    
  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

    <!-- Plugin update rate in Hz -->
    <updateRate>20</updateRate>

    <!-- Name of left joint, defaults to `left_joint` -->
    <leftJoint>left_rear_wheel_link</leftJoint>

    <!-- Name of right joint, defaults to `right_joint` -->
    <rightJoint>right_rear_wheel_link</rightJoint>

    <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
    <wheelSeparation>0.6</wheelSeparation>

    <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
    <wheelDiameter>0.2</wheelDiameter>

    <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
    <wheelAcceleration>1.0</wheelAcceleration>

    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
    <wheelTorque>30</wheelTorque>

    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
    <commandTopic>/cmd_vel</commandTopic>

    <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
    <odometryTopic>odom</odometryTopic>

    <!-- Odometry frame, defaults to `odom` -->
    <odometryFrame>odom</odometryFrame>

    <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
    <robotBaseFrame>base_link</robotBaseFrame>

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometrySource>1</odometrySource>

    <!-- Set to true to publish transforms for the wheel links, defaults to false -->
    <publishWheelTF>true</publishWheelTF>

    <!-- Set to true to publish transforms for the odometry, defaults to true -->
    <publishOdom>true</publishOdom>

    <publishOdomTF>false</publishOdomTF>

    <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
    <publishWheelJointState>true</publishWheelJointState>

    <!-- Set to true to swap right and left wheels, defaults to true -->
    <legacyMode>false</legacyMode>
  </plugin>
</gazebo>

    <gazebo>
        <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
        <alwaysOn>true</alwaysOn>
        <bodyName>base_link</bodyName>
        <topicName>imu/data</topicName>
        <serviceName>imu_service</serviceName>
        <gaussianNoise>0.0</gaussianNoise>
        <updateRate>20.0</updateRate>
        </plugin>
    </gazebo>

    <gazebo>
        <plugin name="gazebo_ros_gps" filename="libhector_gazebo_ros_gps.so">
        <updateRate>4.0</updateRate>
        <bodyName>base_link</bodyName>
        <frameId>gps_link</frameId>
        <topicName>/gps/fix</topicName>
        <velocityTopicName>/gps/fix_velocity</velocityTopicName>
        <referenceLatitude>41.22</referenceLatitude>
        <referenceLongitude>30.10</referenceLongitude>
        <referenceHeading>90</referenceHeading>
        <referenceAltitude>10</referenceAltitude>
        <offset>0 0 0</offset>
        <drift>0.0 0.0 0.0</drift>
        <gaussianNoise>0.0 0.0 0.0</gaussianNoise>
        <velocityDrift>0.001 0.001 0.001</velocityDrift>
        <velocityGaussianNoise>0.5 0.5 0.5</velocityGaussianNoise>
        </plugin>
    </gazebo>


    <gazebo reference="hokuyo_link">
        <sensor type="ray" name="head_hokuyo_sensor">
        <pose>0 0 0 0 0 0</pose>
        <visualize>false</visualize>
        <update_rate>40</update_rate>
        <ray>
            <scan>
            <horizontal>
                <samples>720</samples>
                <resolution>1</resolution>
                <min_angle>-1.570796</min_angle>
                <max_angle>1.570796</max_angle>
            </horizontal>
            </scan>
            <range>
            <min>0.10</min>
            <max>30.0</max>
            <resolution>0.01</resolution>
            </range>
            <noise>
            <type>gaussian</type>
            <!-- Noise parameters based on published spec for Hokuyo laser
                achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
                stddev of 0.01m will put 99.7% of samples within 0.03m of the true
                reading. -->
            <mean>0.0</mean>
            <stddev>0.01</stddev>
            </noise>
        </ray>
        <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
            <topicName>/rrbot/laser/scan</topicName>
            <frameName>hokuyo_link</frameName>
        </plugin>
        </sensor>
    </gazebo>

     <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>1200</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>rrbot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>


</robot>
